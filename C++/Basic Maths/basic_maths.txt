1. Digits

If we have a number and apply modulo 10 we get the last digit of the number
    7789 % 10 = 9
    since in the quotient we will have the nearest lower number (i.e 7780)

Now we have 778 % 10 = 8
77 % 10 = 7
7 % 10 = 7
Now in the end if we further find modulo we get 0
(Basically we are performing division and returning the integer part for further
modulo operation
 and returning the last digit since it is the remainder)

2. Reversing a number:

Similar logic to counting digits
Here we find modulo 10 and store last digit 
then we apply a formula (rev_num*10) + last_digit
and n = n/10 to return the interger part of thr number after modulo

3. Palindrome number

Similar logic to reversing a number we just add an if else statement 
to check if rev num is equal to original number entered
keep in mind to store the original number n in another variable like a duplicate
since it will change after running loop.

4. Armstrong Numbers:

for each loop iteration
extract last digit and store them ,then in a sum variable store sum + ld^3 
then n = n/10 to remove last digit
finally check if sum is equal to original number entered

5. Print all divisors:
First run a loop from 1 till the number we need to print the divisors and print the 
numbers if reminder after division is == 0.

6. Check Prime:
run loop from 1 to the num itself and check how many numbers upon dividing gives == 0
and store that value in a counter cnt, 
if cnt == 2 then it is a prime number 
else not prime

7.GCD/HCF:
GCD is found between 2 numbers (factors of both the numbers and then the
largest number common among them is the GCD
apply same concept as prime and run an if statement
if(n1/i == 0 && n2/i == 0) cout << i;
i will be from 1 till the minimum of the 2 numbers 



